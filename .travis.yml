sudo: required
services:
  - docker

# Build a test version of our client project
# and then run some tests inside of it
before_install:
  # We only get access to the test suite in dev as that has all the 
  # dependencies needed. In a prod version we only have static files
  # -f specifies the dev Dockerfile. ./client is the build context
  - docker build -t sxa011/react-test -f ./client/dev.Dockerfile ./client

# This is the test running section, if any of these
# runs fail, travis CI will assume the build has failed
script:
  # Specify the image to run and the command to run, in this case 
  # the image we created in the previous ste and the command is to 
  # run the tests without watch mode (hence the -- --coverage)
  - docker run sxa011/react-test npm test -- --coverage

# This is run after all the tests pass above and will be 
# building production versions of the project and pushing
# the built images to Docker Hub
after_success:
  # Uses the production Dockerfile by default
  - docker build -t sxa011/multi-client ./client
  - docker build -t sxa011/multi-nginx ./nginx
  - docker build -t sxa011/multi-server ./server
  - docker build -t sxa011/multi-worker ./worker

  # Log in to the docker CLI
  # This pipes in the password into a stdin prompt
  - echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_ID" --password-stdin

  # Take these images and push them to docker hub
  - docker push sxa011/multi-client
  - docker push sxa011/multi-nginx
  - docker push sxa011/multi-server
  - docker push sxa011/multi-worker

# This will push the Dockerrun.aws.json file to AWS Elastic Beanstalk
deploy:
  # Travis CI comes pre-configured to deploy to some cloud providers
  provider: elasticbeanstalk
  # Region where you created the beanstalk instance (see EB URL)
  region: eu-west-2
  # Same name you've given the app in AWS 
  app: multi-docker
  # Environment of the app in AWS
  env: MultiDocker-env
  # Travis will zip all files in repo and copy them over to an 
  # S3 bucket on AWS - then Travis CI will tell EB to update itself
  # now that the contents have changed - we have to provide the name
  # of that bucket (Search 'Service > S3')
  bucket_name: elasticbeanstalk-eu-west-2-382136745092
  # The S3 instance gets re-used for all your Elastic Beanstalk 
  # so we have to specify the path of the files in there. By default
  # a folder isn't created for your app until you deploy for the 
  # first time, it will be the app name typically
  bucket_path: multi-docker
  # We only want to deploy the app to AWS whenever something gets
  # merged with the master branch and not with any feature branches
  on:
    branch: master
  # AWS Access Keys, use Travis CI to store Access Key and Secret
  # key as environment variables- then refer to them in here. Never 
  # store the keys directly in this file, especially in public repos.
  access_key_id: $AWS_ACCESS_KEY
  secret_access_key:
    secure: $AWS_SECRET_KEY